package com.projectswg.tools.csc.conversationeditor;

import com.projectswg.tools.csc.conversationeditor.scene.SceneView;
import com.projectswg.tools.csc.conversationeditor.actions.OpenConversation;
import com.projectswg.tools.csc.conversationeditor.nodes.BeginNode;
import com.projectswg.tools.csc.conversationeditor.nodes.EndNode;
import java.io.File;
import javax.swing.JOptionPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@ConvertAsProperties(
        dtd = "-//com.projectswg.tools.csc.conversationeditor//Editor//EN",
        autostore = true
)
@TopComponent.Description(
        preferredID = "EditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.projectswg.tools.csc.conversationeditor.EditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "Editor",
        preferredID = "EditorTopComponent"
)
@Messages({
    "CTL_EditorAction=Conversation Editor",
    "CTL_EditorTopComponent=Conversation Editor",
    "HINT_EditorTopComponent=Conversation Editor window"
})
public final class EditorTopComponent extends TopComponent implements ExplorerManager.Provider {

    private final ExplorerManager mgr = new ExplorerManager();
    private final SceneView scene;
    private String activePath = "";
    
    public EditorTopComponent() {
        initComponents();

        setToolTipText(Bundle.HINT_EditorTopComponent());
        setName("*New Conversation*");
        
        this.scene = new SceneView(mgr);
        scrollPane.setViewportView(scene.createView());
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        
        //SystemAction.get(CompileWizardAction.class).setEnabled(true);        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
        if (activePath.isEmpty() && scene.getScenePath().isEmpty()) {
            blankSlate();
            return;
        }
        
        if (!scene.isLoaded()) {
            File file = new File(activePath);

            if (!file.exists()) {
                JOptionPane.showMessageDialog(null, "Couldn't open conversation file " + file.getAbsolutePath()
                        + " because it no longer exists.", "Conversation Script Editor", JOptionPane.INFORMATION_MESSAGE);
                blankSlate();
                scene.validate();
            } else {
                OpenConversation.open(file, this);
            }
        }
    }

    @Override
    public void componentClosed() {
        // TODO: save msg
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("activePath", scene.getScenePath());
    }

    void readProperties(java.util.Properties p) {
        this.activePath = p.getProperty("activePath");
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    public SceneView getScene() {
        return scene;
    }
    
    public void blankSlate() {
        scene.addNode(new BeginNode(scene.getStfFile(), 0));
        scene.addNode(new EndNode(scene.getStfFile(), 1));
    }
}
